package com.openelements.hiero.base.protocol.data;

import java.util.Map;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public enum TransactionType {
    ACCOUNT_CREATE("CRYPTOCREATEACCOUNT"),
    ACCOUNT_DELETE("CRYPTODELETE"),
    ACCOUNT_UPDATE("CRYPTOUPDATEACCOUNT"),
    ALLOWANCE_APPROVAL("CRYPTOAPPROVEALLOWANCE"),
    ALLOWANCE_DELETION("CRYPTODELETEALLOWANCE"),
    CRYPTO_TRANSFER("CRYPTOTRANSFER"),
    ADD_LIVE_HASH("CRYPTOADDLIVEHASH"),
    DELETE_LIVE_HASH("CRYPTODELETELIVEHASH"),
    TOPIC_CREATE("CONSENSUSCREATETOPIC"),
    TOPIC_UPDATE("CONSENSUSUPDATETOPIC"),
    TOPIC_MESSAGE_SUBMIT("CONSENSUSSUBMITMESSAGE"),
    TOPIC_DELETE("CONSENSUSDELETETOPIC"),
    TOKEN_CREATE("TOKENCREATION"),
    TOKEN_UPDATE("TOKENUPDATE"),
    TOKEN_DELETE("TOKENDELETION"),
    TOKEN_ASSOCIATE("TOKENASSOCIATE"),
    TOKEN_DISSOCIATE("TOKENDISSOCIATE"),
    TOKEN_MINT("TOKENMINT"),
    TOKEN_BURN("TOKENBURN"),
    TOKEN_FREEZE("TOKENFREEZE"),
    TOKEN_FEE_SCHEDULE_UPDATE("TOKENFEESCHEDULEUPDATE"),
    TOKEN_UNFREEZE("TOKENUNFREEZE"),
    TOKEN_GRANT_KYC("TOKENGRANTKYC"),
    TOKEN_REVOKE_KYC("TOKENREVOKEKYC"),
    TOKEN_PAUSE("TOKENPAUSE"),
    TOKEN_UNPAUSE("TOKENUNPAUSE"),
    TOKEN_REJECT("TOKENREJECT"),
    TOKEN_WIPE("TOKENWIPE"),
    TOKEN_AIRDROP("TOKENAIRDROP"),
    TOKEN_CLAIM_AIRDROP("TOKENCLAIMAIRDROP"),
    TOKEN_CANCEL_AIRDROP("TOKENCANCELAIRDROP"),
    NFT_UPDATE("TOKENUPDATENFTS"),
    FILE_CREATE("FILECREATE"),
    FILE_APPEND("FILEAPPEND"),
    FILE_UPDATE("FILEUPDATE"),
    FILE_DELETE("FILEDELETE"),
    FREEZE("FREEZE"),
    NODE("NODE"),
    CREATE_NODE("NODECREATE"),
    DELETE_NODE("NODEDELETE"),
    UPDATE_NODE("NODEUPDATE"),
    NODE_STAKE_UPDATE("NODESTAKEUPDAT"),
    CREATE_SCHEDULE("SCHEDULECREATE"),
    DELETE_SCHEDULE("SCHEDULEDELETE"),
    SIGN_SCHEDULE("SCHEDULESIGN"),
    DELETE_SYSTEM("SYSTEMDELETE"),
    UNDELETE_SYSTEM("SYSTEMUNDELETE"),
    CONTRACT_CREATE("CONTRACTCREATEINSTANCE"),
    CONTRACT_UPDATE("CONTRACTUPDATEINSTANCE"),
    CONTRACT_DELETE("CONTRACTDELETEINSTANCE"),
    CONTRACT_CALL("CONTRACTCALL"),
    ETHEREUM("ETHEREUMTRANSACTION"),
    UNCHECKED_SUBMIT("UNCHECKEDSUBMIT"),
    UTILPRNG("UTILPRNG"),
    UNKNOWN("UNKNOWN");

    private final String type;

    private static final Map<String, TransactionType> map = Stream.of(values())
            .collect(Collectors.toMap(TransactionType::getType, t -> t));

    TransactionType(String type) {
        this.type = type;
    }

    public String getType() {
        return this.type;
    }

    public static TransactionType from(String value) {
        return map.getOrDefault(value, TransactionType.UNKNOWN);
    }

}
